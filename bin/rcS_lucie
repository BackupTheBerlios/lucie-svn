#! /usr/bin/ruby1.8

require 'rake'

# create ramdisk

sh %{mount -n -t proc proc /proc}

$logdir = '/tmp/lucie'
$diskvar = File.join( $logdir, 'disk_var.sh' )
cmdline = %x(cat /proc/cmdline)
$installer_name = cmdline[cmdline.index('BOOT_IMAGE')+11..-1].strip

# start devfsd if needed
if FileTest.chardev?( '/dev/.devfsd' )
  sh %{/sbin/devfsd /dev}
end

# if we have shm use it as ramdisk
rc = sh %{mount -t tmpfs tmpfs /tmp}
unless rc
  sh %{mke2fs -q -m 0 /dev/ram0}
  sh %{mount -n /dev/ram0 /tmp}
end

# now create the required subdirectories
mkdir_p '/tmp/etc'
mkdir_p '/tmp/target'
mkdir_p '/tmp/var/run/sshd'
mkdir_p '/tmp/var/state/discover'
mkdir_p '/tmp/var/lib/discover'

mkdir '/tmp/var/tmp'
mkdir '/tmp/var/log'
mkdir '/tmp/var/lock'
mkdir '/tmp/var/spool'


# init

# directory where temporary log files are stored.
mkdir_p '/tmp/lucie'

sh %{grep -q '[[:space:]]sysfs' /proc/filesystems && mount -t sysfs sysfs /sys} rescue nil
sh %{ifup lo} rescue nil
sh %{[ -x /sbin/portmap ] && /sbin/portmap} rescue nil
sh %{mount -t devpts devpts /dev/pts}
# add other options for nfs mount of /dev/root to root-path in dhcpd.conf
sh %{mount -o remount,noatime,ro /dev/root /}
sh %{cat /proc/kmsg >/dev/tty4 &}
sh %{dmesg > #{File.join($logdir, 'dmesg.log')}}

## task install

sh %{hwdetect}

# task partition
puts "Partitioning local harddisks"
sh %{[ ! -s #{$diskvar} ] && setup_harddisks -f #{File.join( '/etc/lucie', $installer_name, 'partition')} -d -X > #{File.join( $logdir, 'format.log' )} 2>&1}


# task mountdisks
fstab = File.join( $logdir, 'fstab' )
raise "No #{fstab} created." unless FileTest.exists?(fstab)
# mount swap space
swaplist = `source #{$diskvar} && echo $SWAPLIST`.strip.split(' ')
swaplist.each do |each|
  sh %{swapon #{each} && echo "Enable swap device #{each}"}
end
sh %{mount2dir /tmp/target #{fstab}}

# task extrbase
require '/etc/lucie/resource.rb'
require 'lucie/config'

installer = Lucie::Config::Installer[$installer_name]
base_tgz = File.join( '/var/tmp', installer.distribution + '_' + installer.distribution_version + '.tgz')
puts "Unpcking Debian base archive"
sh %{gzip -dc #{base_tgz} | tar -C /tmp/target -xpf -}
# now we can copy fstab
sh %{[ -f /tmp/target/etc/fstab ] && mv /tmp/target/etc/fstab /tmp/target/etc/fstab.old}
cp fstab, '/tmp/target/etc/fstab', :preserve => true

# task mirror
# task updatebase
# task instsoft
# task configure
# task finish
# task chboot
# save_dmsg
# task savelog

# task faiend

sleep 10
